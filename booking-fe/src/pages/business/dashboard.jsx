import React, { useEffect, useState } from "react";
import "../../assets/styles/business.css";
import api from "../../axios";

export default function BusinessDashboard() {
  const [totalServices, setTotalServices] = useState(0);
  const [todayAppointments, setTodayAppointments] = useState([]);
  const [totalTodayAppointments, setTotalTodayAppointments] = useState(0);
  const [todayFeedbacks, setTodayFeedbacks] = useState([]);
  const [totalTodayFeedbacks, setTotalTodayFeedbacks] = useState(0);
  const [monthlyIncome, setMonthlyIncome] = useState(0);
  const [latestServices, setLatestServices] = useState([]);

  const user = JSON.parse(localStorage.getItem("user"));
  const businessId = user.business_id;

  useEffect(() => {
    if (!businessId) return;

    // üî• L·∫•y t·ªïng d·ªãch v·ª•
    api
      .get(`/businesses/${businessId}/services/total`)
      .then((res) => {
        setTotalServices(res.data.total_services);
      })
      .catch((err) => {
        console.error("L·ªói l·∫•y t·ªïng d·ªãch v·ª•:", err);
      });

    // üî• L·∫•y l·ªãch h·∫πn h√¥m nay
    api
      .get(`/businesses/${businessId}/appointments/today`)
      .then((res) => {
        setTodayAppointments(res.data.appointments);
        setTotalTodayAppointments(res.data.total);
      })
      .catch((err) => {
        console.error("L·ªói l·∫•y l·ªãch h·∫πn h√¥m nay:", err);
      });

    // üî• L·∫•y feedbacks h√¥m nay
    api
      .get(`/businesses/${businessId}/feedbacks/today`)
      .then((res) => {
        setTodayFeedbacks(res.data.feedbacks);
        setTotalTodayFeedbacks(res.data.total);
      })
      .catch((err) => {
        console.error("L·ªói l·∫•y feedback h√¥m nay:", err);
      });

    // üî• L·∫•y doanh thu th√°ng
    api
      .get(`/businesses/${businessId}/income/month`)
      .then((res) => {
        setMonthlyIncome(res.data.total);
      })
      .catch((err) => {
        console.error("L·ªói l·∫•y doanh thu th√°ng:", err);
      });

    // üî• L·∫•y 3 d·ªãch v·ª• m·ªõi nh·∫•t
    api
      .get(`/businesses/${businessId}/services/latest`)
      .then((res) => {
        setLatestServices(res.data.services);
      })
      .catch((err) => {
        console.error("L·ªói l·∫•y d·ªãch v·ª• m·ªõi nh·∫•t:", err);
      });

    // üî• Ki·ªÉm tra ƒë√£ setup xong ch∆∞a
    api
      .get("/businesses/setup-status")
      .then((res) => {
        const { hasServices, hasStaff, hasLink, ready } = res.data;
        if (!ready) {
          let html = `<ul style="text-align: left">`;
          html += `<li>${hasServices ? "‚úÖ" : "‚ùå"} C√≥ d·ªãch v·ª•</li>`;
          html += `<li>${hasStaff ? "‚úÖ" : "‚ùå"} C√≥ nh√¢n vi√™n</li>`;
          html += `<li>${
            hasLink ? "‚úÖ" : "‚ùå"
          } ƒê√£ g√°n nh√¢n vi√™n cho d·ªãch v·ª•</li>`;
          html += `</ul>`;

          import("sweetalert2").then(({ default: Swal }) => {
            Swal.fire({
              icon: "warning",
              title: "‚ö†Ô∏è C·∫ßn ho√†n t·∫•t c·∫•u h√¨nh",
              html,
              showCancelButton: true,
              confirmButtonText: "üîß C·∫•u h√¨nh ngay",
              cancelButtonText: "ƒê·ªÉ sau",
            }).then((result) => {
              if (result.isConfirmed) {
                window.location.href = "/business/service";
              }
              // N·∫øu mu·ªën l√†m g√¨ ƒë√≥ khi ng∆∞·ªùi ta hu·ª∑ th√¨ x·ª≠ l√Ω th√™m ·ªü ƒë√¢y
            });
          });
          
        }
      })
      .catch((err) => {
        console.error("L·ªói khi ki·ªÉm tra setup-status:", err);
      });
  }, [businessId]);

  return (
    <div className="business-container">
      <main className="business-main">
        {/* üî• Banner ch√†o m·ª´ng */}
        <div className="business-banner">
          üéâ Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác hi·ªáu qu·∫£!
        </div>

        <h2>üëã Ch√†o m·ª´ng ƒë·∫øn Business Dashboard</h2>
        <p>
          ƒê√¢y l√† n∆°i qu·∫£n l√Ω d·ªãch v·ª•, l·ªãch h·∫πn, ph·∫£n h·ªìi v√† doanh thu c·ªßa doanh
          nghi·ªáp b·∫°n.
        </p>

        {/* üî• Th·ªëng k√™ nhanh */}
        <div className="business-stats">
          <div className="stat-card stat-purple">
            <h3>
              {Number(monthlyIncome).toLocaleString("vi-VN", {
                style: "currency",
                currency: "VND",
              })}
            </h3>
            <p>üí∞ Doanh thu th√°ng n√†y</p>
          </div>
          <div className="stat-card stat-blue">
            <h3>{totalServices}</h3>
            <p>üõ† D·ªãch v·ª•</p>
          </div>
          <div className="stat-card stat-green">
            <h3>{totalTodayAppointments}</h3>
            <p>üìÖ L·ªãch h·∫πn h√¥m nay</p>
          </div>
          <div className="stat-card stat-yellow">
            <h3>{totalTodayFeedbacks}</h3>
            <p>üí¨ Feedback m·ªõi</p>
          </div>
        </div>

        {/* üî• B·∫£ng d·ªãch v·ª• m·ªõi nh·∫•t */}
        <section className="business-section">
          <h2>D·ªãch v·ª• m·ªõi nh·∫•t</h2>
          <table className="business-table">
            <thead>
              <tr>
                <th>T√™n d·ªãch v·ª•</th>
                <th>Gi√°</th>
                <th>Ng√†y t·∫°o</th>
              </tr>
            </thead>
            <tbody>
              {latestServices.length > 0 ? (
                latestServices.map((s) => (
                  <tr key={s.id}>
                    <td>{s.name}</td>
                    <td>{Number(s.price).toLocaleString("vi-VN")}ƒë</td>
                    <td>
                      {new Date(s.created_at).toLocaleDateString("vi-VN")}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="3">Ch∆∞a c√≥ d·ªãch v·ª• n√†o</td>
                </tr>
              )}
            </tbody>
          </table>
        </section>

        {/* üî• B·∫£ng l·ªãch h·∫πn h√¥m nay */}
        <section className="business-section">
          <h2>L·ªãch h·∫πn h√¥m nay</h2>
          <table className="business-table">
            <thead>
              <tr>
                <th>Kh√°ch h√†ng</th>
                <th>D·ªãch v·ª•</th>
                <th>Gi·ªù h·∫πn</th>
              </tr>
            </thead>
            <tbody>
              {todayAppointments.map((appointment) => (
                <tr key={appointment.id}>
                  <td>{appointment.user?.name || "Ch∆∞a c√≥ t√™n"}</td>
                  <td>{appointment.service?.name || "Ch∆∞a c√≥ d·ªãch v·ª•"}</td>
                  <td>{appointment.time_start || "Ch∆∞a c√≥ gi·ªù"}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>

        {/* üî• B·∫£ng feedback h√¥m nay */}
        <section className="business-section">
          <h2>Feedback h√¥m nay</h2>
          <table className="business-table">
            <thead>
              <tr>
                <th>Kh√°ch h√†ng</th>
                <th>Rating</th>
                <th>ƒê√°nh gi√°</th>
              </tr>
            </thead>
            <tbody>
              {todayFeedbacks.length > 0 ? (
                todayFeedbacks.map((fb) => (
                  <tr key={fb.id}>
                    <td>{fb.user?.name || "Ch∆∞a c√≥ t√™n"}</td>
                    <td>
                      {fb.rating
                        ? "‚≠êÔ∏è".repeat(fb.rating) + "‚òÜ".repeat(5 - fb.rating)
                        : "Ch∆∞a c√≥ rating"}
                    </td>
                    <td>{fb.comment || "Ch∆∞a c√≥ feedback"}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="3">Ch∆∞a c√≥ feedback h√¥m nay</td>
                </tr>
              )}
            </tbody>
          </table>
        </section>
      </main>
    </div>
  );
}
